autoload -Uz compinit -u && compinit -i

# Set iterm hostname prior to script to speed-up.
#ITERM2_HOSTNAME='flypro'
#test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
# OLD # Load new iterm2 shell utilities imgcat and it2dl
#source ~/.iterm2_shell_integration.zsh

# Get color support for 'less'
export LESS="--RAW-CONTROL-CHARS"
# Load LESS_TERMCAP color variables for less, man, etc., colorful
#[[ -f ~/.LESS_TERMCAP ]] && source ~/.LESS_TERMCAP

# maintains a jump-list of the directories you actually use
#. /usr/local/etc/profile.d/z.sh

#|USE:
#|z foo     # cd to most frecent dir matching foo
#|z foo bar # cd to most frecent dir matching foo and bar
#|z -r foo  # cd to highest ranked dir matching foo
#|z -t foo  # cd to most recently accessed dir matching foo
#|z -l foo  # list matches instead of cd
#|z -c foo  # restrict matches to subdirs of $PWD
#|optionally:
#|  set $_Z_CMD in .bashrc/.zshrc to change the command (default z).
#|  set $_Z_DATA in .bashrc/.zshrc to change the datafile (default ~/.z).
#|  set $_Z_NO_RESOLVE_SYMLINKS to prevent symlink resolution.
#|  set $_Z_NO_PROMPT_COMMAND if you're handling PROMPT_COMMAND yourself.
#|  set $_Z_EXCLUDE_DIRS to an array of directories to exclude.
#|  set $_Z_OWNER to your username if you want use z while sudo with $HOME kept

#"/Applications/VMware Fusion.app/Contents/Library/VMware OVF Tool"
#"/Applications/VMware Fusion.app/Contents/Library/dockers/proxyApp-template-app/Contents/MacOS"
## extra files in ~/.zsh/configs/pre , ~/.zsh/configs , and ~/.zsh/configs/post
## these are loaded first, second, and third, respectively.
#_load_settings() {
#  _dir="$1"
#  if [ -d "$_dir" ]; then
#    if [ -d "$_dir/pre" ]; then
#      for config in "$_dir"/pre/**/*(N-.); do
#        . $config
#      done
#    fi
#
#    for config in "$_dir"/**/*(N-.); do
#      case "$config" in
#        "$_dir"/pre/*)
#          :
#          ;;
#        "$_dir"/post/*)
#          :
#          ;;
#        *)
#          if [ -f $config ]; then
#            . $config
#          fi
#          ;;
#      esac
#    done
#
#    if [ -d "$_dir/post" ]; then
#      for config in "$_dir"/post/**/*(N-.); do
#        . $config
#      done
#    fi
#  fi
#}
#_load_settings "$HOME/.zsh/configs"

########################################
#		      ZSH-AUTOENV              #
########################################
# See README.md below
# Name of the file to look for when entering directories.
# Default: `.autoenv.zsh`
#AUTOENV_FILE_ENTER='.autoenv.zsh'
# Name of the file to look for when leaving directories.
# Requires `AUTOENV_HANDLE_LEAVE=1`.
# Default: `.autoenv_leave.zsh`
#AUTOENV_FILE_LEAVE='.autoenv_leave.zsh'
# Look for zsh-autoenv "enter" files in parent dirs?
# Default: `1`
#AUTOENV_LOOK_UPWARDS='1'
# Handle leave events when changing away from a subtree, where an "enter"
# event was handled?
# Default: `1`
#AUTOENV_HANDLE_LEAVE='1'
# (Temporarily) disable zsh-autoenv. This gets looked at in the chpwd handler.
# Default: 0
#AUTOENV_DISABLED='0'
# Enable debugging. Multiple levels are supported (max 2).
# Default: 0
#AUTOENV_DEBUG='0'

##############################################
### Other zplug examples ###
## Can manage a plugin as a command
## And accept glob patterns (e.g., brace, wildcard, ...)
#zplug "Jxck/dotfiles", as:command, of:"bin/{histuniq,color}"
#
## Can manage everything e.g., other person's zshrc
#zplug "tcnksm/docker-alias", of:zshrc
#
## Prohibit updates to a plugin by using the "frozen:" tag
#zplug "k4rthik/git-cal", as:command, frozen:1
#
## Grab binaries from GitHub Releases
## and rename to use "file:" tag
#zplug "junegunn/fzf-bin", \
#    as:command, \
#    from:gh-r, \
#    file:fzf, \
#    of:"*darwin*amd64*"

## Run a command after a plugin is installed/updated
#zplug "tj/n", do:"make install"
#
## Support checking out a specific branch/tag/commit of a plugin
#zplug "b4b4r07/enhancd", at:v1
#zplug "mollifier/anyframe", commit:4c23cb60
#
## Install if "if:" tag returns true
#zplug "hchbaw/opp.zsh", if:"(( ${ZSH_VERSION%%.*} < 5 ))"
#
## Can manage gist file just like other plugins
#zplug "b4b4r07/79ee61f7c140c63d2786", \
#    from:gist, \
#    as:command, \
#    of:get_last_pane_path.sh
#
## Support bitbucket
#zplug "b4b4r07/hello_bitbucket", \
#    as:command, \
#    from:bitbucket, \
#    do:"chmod 755 *.sh", \
#    of:"*.sh"
#
## Group dependencies, emoji-cli depends on jq in this example
#zplug "stedolan/jq", \
#    as:command, \
#    file:jq, \
#    from:gh-r \
#    | zplug "b4b4r07/emoji-cli"

#[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/Tarrasch/zsh-autoenv/trend.png)](https://bitdeli.com/free "Bitdeli Badge")
#
#[![Build Status](https://travis-ci.org/Tarrasch/zsh-autoenv.svg?branch=master)](https://travis-ci.org/Tarrasch/zsh-autoenv)
#
## Autoenv for Zsh
#
#zsh-autoenv automatically sources (known/whitelisted) `.autoenv.zsh` files,
#typically used in project root directories.
#
#It handles "enter" and leave" events, nesting, and stashing of
#variables (overwriting and restoring).
#
### Features
#
# - Support for enter and leave events, which can use the same file.
#   By default `.autoenv.zsh` is used for entering, and `.autoenv_leave.zsh`
#   for leaving.
# - Interactively asks for confirmation / authentication before sourcing an
#   unknown `.autoenv.zsh` file, and remembers whitelisted files by their
#   hashed content.
# - Test suite.
# - Written in Zsh.
#
#### Variable stashing
#
#You can use `autostash` in your `.autoenv.zsh` files to overwrite some
#variable, e.g.  `$PATH`.  When leaving the directory, it will be automatically
#restored.
#
#    % echo 'echo ENTERED; autostash FOO=changed' > project/.autoenv.zsh
#    % FOO=orig
#    % cd project
#    Attempting to load unauthorized env file!
#    -rw-rw-r-- 1 user user 36 Mai  6 20:38 /tmp/project/.autoenv.zsh
#
#    **********************************************
#
#    echo ENTERED; autostash FOO=changed
#
#    **********************************************
#
#    Would you like to authorize it? (type 'yes') yes
#    ENTERED
#    project % echo $FOO
#    changed
#    % cd ..
#    % echo $FOO
#    orig
#
#There is also `stash`, `unstash` and `autounstash`, in case you want to
#have more control.
#
#The varstash library has been taken from smartcd, and was optimized for Zsh.
#
#
### Writing your .autoenv.zsh file
#
#### `autoenv_source_parent()`
#
#zsh-autoenv will stop looking for `.autoenv.zsh` files upwards after the first
#one has been found, but you can use the function `autoenv_source_parent` to
#source the next `.autoenv.zsh` file upwards the directory tree from there.
#
#The function accepts an optional argument, which allows to stop looking before
#the file system root is reached:
#
#```zsh
#autoenv_source_parent ../..
#```
#
### Installation
#
#Clone the repository and source it from your `~/.zshrc` file:
#
#    % git clone https://github.com/Tarrasch/zsh-autoenv ~/.dotfiles/lib/zsh-autoenv
#    % echo 'source ~/.dotfiles/lib/zsh-autoenv/autoenv.zsh' >> ~/.zshrc
#
#### Using [antigen](https://github.com/zsh-users/antigen)
#
#    antigen-bundle Tarrasch/zsh-autoenv
#
#### Using [zgen](https://github.com/tarjoilija/zgen)
#
#Add the following to your `.zshrc` where you are loading your plugins:
#
#    zgen load Tarrasch/zsh-autoenv
#
#
### Configuration
#
#You can use the following variables to control zsh-autoenv's behavior.
#Add them to your `~/.zshrc` file, before sourcing/loading zsh-autoenv.
#
#### AUTOENV\_FILE\_ENTER
#Name of the file to look for when entering directories.
#
#Default: `.autoenv.zsh`
#
#### AUTOENV\_FILE\_LEAVE
#Name of the file to look for when leaving directories.
#Requires `AUTOENV_HANDLE_LEAVE=1`.
#
#Default: `.autoenv_leave.zsh`
#
#### AUTOENV\_LOOK\_UPWARDS
#Look for zsh-autoenv "enter" files in parent dirs?
#
#Default: `1`
#
#### AUTOENV\_HANDLE\_LEAVE
#Handle leave events when changing away from a subtree, where an "enter"
#event was handled?
#
#Default: `1`
#
#### AUTOENV\_DISABLED
#(Temporarily) disable zsh-autoenv. This gets looked at in the chpwd handler.
#
#Default: 0
#
#### AUTOENV\_DEBUG
#Enable debugging. Multiple levels are supported (max 2).
#
#Default: `0`
#
#
### Related projects
#- https://github.com/direnv/direnv
#- https://github.com/cxreg/smartcd
#- https://github.com/kennethreitz/autoenv
#
#
### History
#
#This started as an optimized version of the bash plugin
#[autoenv](https://github.com/kennethreitz/autoenv) but for Zsh, and grew a lot
#of functionality on top of it (inspired by [smartcd]).
#
#The code was initially based on
#[@joshuaclayton](https://github.com/joshuaclayton)'s dotfiles.
#In September 2013 [@Tarrasch](https://github.com/Tarrasch) packaged it into a
#nice [antigen]-compatible unit with integration tests. Since November 2014,
#[@blueyed](https://github.com/blueyed) took over and added many many nice
#features, mainly inspired by [smartcd].
#
#[antigen]: https://github.com/Tarrasch/antigen-hs
#[smartcd]: https://github.com/cxreg/smartcd
